@startuml Confident_Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_TOP_DOWN()

title
  Confident Component diagram
end title

Person(user, "User", "A user at MET that may want to run extra QC or integrate a new QC tests and see the outcome")
System(new_obs_system, "Met operative automated", "Automated system that triggers the QC that needs to run automatically")
System_Ext(kafka, "Data ingress", "New observations come to MET, currently uses Kafka")

System_Ext(frost, "Frost", "Rest API")
SystemDb_Ext(oda, "ODA", "Observation database.")
SystemDb_Ext(lustre, "Lustre", "File system")
SystemDb_Ext(datasources, "Other data sources", "Other data sources needed for QC")

System_Boundary(Confident, "QC system for observations") {
  Container(controller, "Controller", "Golang", "Controller for QC, knows the dependencies between QC tests and can schedule the dependencies as needed")
  Container_Boundary(runner, "Runner") {
    Component(test_harness, "Test harness", "Rust", "Calls the test code with appropriate input from the request and cache")
    ComponentDb(cache, "Cache", "Rust", "Stores data needed across multiple test runs in local memory")
    Component(storage_glue, "Storage Glue", "Rust", "Takes information from the cache about what data it needs from what source, and retreives it")
  }
}

Rel_U(new_obs_system, kafka, "opens stream, and receives notifications of arrival of new data", "sarama")

Rel(controller, test_harness, "requests QC tests to be run and receives QC flags in return", "GRPC")
Rel(new_obs_system, oda, "writes QC flags to", "GRPC")

Rel(test_harness, cache, "requests data needed for QC tests", "function call")
Rel(cache, storage_glue, "requests data needed for data not in cache", "function call")

Rel(user, controller, "creates manual API calls, and receives QC flags in return", "HTTPS")
Rel(new_obs_system, controller, "creates automated API calls to, and receives QC flags in return", "GRPC")
Rel(storage_glue, oda, "gets data needed by cache", "GRPC")
Rel(storage_glue, lustre, "gets data needed by cache")
Rel(storage_glue, datasources, "gets data needed by cache")
Rel(user, frost, "gets output of QC tests, or more general data quality information from", "REST API")
@enduml
